version: '3.8'

services:
  # WordPress with PHP 8.3
  wordpress:
    build:
      context: .
      dockerfile: docker/Dockerfile.wordpress
      args:
        - PHP_VERSION=8.3
    ports:
      - "8000:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DEBUG: 1
      WORDPRESS_DEBUG_LOG: 1
      WORDPRESS_DEBUG_DISPLAY: 1
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_DEBUG', true);
        define('WP_DEBUG_LOG', true);
        define('WP_DEBUG_DISPLAY', true);
        define('SCRIPT_DEBUG', true);
        define('SAVEQUERIES', true);
        define('WP_ENVIRONMENT_TYPE', 'development');
        
        // Enable REST API debugging
        define('WP_DEBUG_LOG', true);
        
        // Plugin development helpers
        define('WP_DISABLE_FATAL_ERROR_HANDLER', true);
        define('AUTOMATIC_UPDATER_DISABLED', true);
    volumes:
      - wordpress_data:/var/www/html
      - ./:/var/www/html/wp-content/plugins/wordpress-plugin-template
      - ./docker/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
      - ./docker/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    depends_on:
      - db
    networks:
      - wordpress_network
    restart: unless-stopped

  # WordPress CLI
  wp-cli:
    build:
      context: .
      dockerfile: docker/Dockerfile.wp-cli
    volumes:
      - wordpress_data:/var/www/html
      - ./:/var/www/html/wp-content/plugins/wordpress-plugin-template
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress
    depends_on:
      - wordpress
      - db
    networks:
      - wordpress_network
    profiles:
      - cli

  # MySQL Database
  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress_password
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - wordpress_network
    restart: unless-stopped
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      PMA_HOST: db
      PMA_USER: wordpress
      PMA_PASSWORD: wordpress_password
      MYSQL_ROOT_PASSWORD: root_password
      PMA_ARBITRARY: 1
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - wordpress_network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wordpress_network
    restart: unless-stopped
    profiles:
      - cache

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - wordpress_network
    restart: unless-stopped
    profiles:
      - mail

  # Node.js for asset building
  node:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./:/app
    command: sh -c "npm install && npm run watch"
    networks:
      - wordpress_network
    profiles:
      - assets

volumes:
  wordpress_data:
  db_data:
  redis_data:

networks:
  wordpress_network:
    driver: bridge
